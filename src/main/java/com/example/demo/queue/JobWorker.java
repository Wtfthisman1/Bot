package com.example.demo.queue;


import com.example.demo.service.DownloaderExecutor;
import com.example.demo.service.MessageSender;
import com.example.demo.service.TranscribeExecutor;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

@Component
@RequiredArgsConstructor
@Slf4j
public class JobWorker implements Runnable {

    private final JobQueue queue;
    private final DownloaderExecutor downloader;
    private final TranscribeExecutor transcriber;
    private final MessageSender messageSender;

    private volatile boolean running = true;
    private Thread worker;

    @PostConstruct
    void start() {
        worker = new Thread(this, "job-worker");
        worker.start();
    }

    @PreDestroy
    void stop() {
        running = false;
        worker.interrupt();
    }

    @Override
    public void run() {
        while (running) {
            try {
                ProcessingJob job = queue.take();   // –±–ª–æ–∫–∏—Ä—É–µ–º—Å—è
                switch (job.state()) {
                    case NEW        -> download(job);
                    case DOWNLOADED -> transcribe(job);
                }
            } catch (InterruptedException ie) {
                if (!running) break;   // –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π shutdown
                Thread.currentThread().interrupt();
            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏", ex);
            }
        }
        log.info("Job-worker –∑–∞–≤–µ—Ä—à—ë–Ω");
    }

    private void download(ProcessingJob job) {
        try {
            Path file = downloader.download(job.chatId(), job.url());
            log.info("–°–∫–∞—á–∞–Ω–æ {}", file);
            queue.enqueue(job.withFile(file));   // put –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è URL: {}", job.url(), e);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            String errorMessage = getErrorMessage(job.url(), e);
            messageSender.sendMessage(job.chatId(), errorMessage);
        }
    }

    private void transcribe(ProcessingJob job) {
        try {
            Path txt = transcriber.run(job.chatId(), job.filePath());
            log.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞ {}", txt);
            messageSender.sendTranscript(job.chatId(), txt);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞: {}", job.filePath(), e);
            messageSender.sendMessage(job.chatId(), 
                "‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.");
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String getErrorMessage(String url, Exception e) {
        String errorText = e.getMessage() != null ? e.getMessage().toLowerCase() : "";
        
        if (errorText.contains("unsupported url")) {
            return String.format("""
                ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞: %s
                
                üîó –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
                ‚Ä¢ YouTube (youtube.com, youtu.be)
                ‚Ä¢ Vimeo (vimeo.com)
                ‚Ä¢ TikTok (tiktok.com)
                ‚Ä¢ Instagram (instagram.com)
                ‚Ä¢ Twitter/X (twitter.com, x.com)
                ‚Ä¢ Facebook (facebook.com)
                
                üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.
                """, url);
        }
        
        if (errorText.contains("video unavailable") || errorText.contains("private")) {
            return String.format("""
                üîí –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %s
                
                –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                ‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
                ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                ‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                """, url);
        }
        
        if (errorText.contains("network") || errorText.contains("connection")) {
            return String.format("""
                üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: %s
                
                –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É.
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.
                """, url);
        }
        
        // –û–±—â–∞—è –æ—à–∏–±–∫–∞
        return String.format("""
            ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: %s
            
            –ü—Ä–∏—á–∏–Ω–∞: %s
            
            üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
            ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
            ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É
            """, url, e.getMessage());
    }
}
