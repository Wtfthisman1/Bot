package com.example.demo.service;

import com.example.demo.config.BotConfig;
import com.example.demo.upload.UploadService;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendChatAction;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.nio.file.Path;
import java.util.List;

@Component
@Slf4j
public class TelegramBot extends TelegramLongPollingBot {

    private static final int TG_LIMIT = 4096;

    private final BotConfig      config;
    private final UploadService  uploadService;
    private final TaskExecutor   taskExecutor;   // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É–ª Spring Boot
    private final List<BotCommand> commands;

    public TelegramBot(BotConfig cfg,
                       UploadService uploadService,
                       TaskExecutor taskExecutor) {
        super(cfg.getBotToken());
        this.config        = cfg;
        this.uploadService = uploadService;
        this.taskExecutor  = taskExecutor;

        this.commands = List.of(
                new BotCommand("/start",  "–°—Ç–∞—Ä—Ç"),
                new BotCommand("/help",   "–°–ø—Ä–∞–≤–∫–∞"),
                new BotCommand("/upload", "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
        );
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ init ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    @PostConstruct
    void init() {
        try {
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", e);
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ updates ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    @Override
    public void onUpdateReceived(Update u) {
        if (!u.hasMessage() || !u.getMessage().hasText()) return;

        long   chatId = u.getMessage().getChatId();
        String text   = u.getMessage().getText();
        String name   = u.getMessage().getFrom().getFirstName();



        switch (text) {
            case "/start"  -> sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç " + name);
            case "/help"   -> sendMessage(chatId,
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /upload, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.");
            case "/upload" -> uploadCommand(chatId);
            default        -> sendMessage(chatId, "–ù–µ –ø–æ–Ω–∏–º–∞—é ü§î");
        }
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

    private void uploadCommand(long chatId) {
        // –Ω–µ–±–æ–ª—å—à–æ–µ UX-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ¬´–ø–µ—á–∞—Ç–∞—é¬ª
        sendChatAction(chatId, "typing");

        String link = uploadService.generate(chatId);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏ –∏ \n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        String html = """
                –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ <b>5</b> —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫.\n
                –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n\n
                <a href=\"%s\">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ –∑–∞–≥—Ä—É–∑–∫–∏</a>
                """.formatted(link);

        sendMessage(chatId, html.strip(), "HTML");
    }




    /** –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ */
    public void sendTranscript(long chatId, Path txt) {
        taskExecutor.execute(() -> {
            try {
                execute(SendDocument.builder()
                        .chatId(String.valueOf(chatId))
                        .caption("‚úÖ –í–∞—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                        .document(new InputFile(txt.toFile()))
                        .build());
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", e);
            }
        });
    }

    /* base sendMessage */

    public void sendMessage(long chatId, String text) {
        sendMessage(chatId, text, null);
    }

    public void sendMessage(long chatId, String text, String parseMode) {
        if (text.length() > TG_LIMIT)
            text = text.substring(0, TG_LIMIT - 3) + "‚Ä¶";

        SendMessage msg = SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .build();
        if (parseMode != null) msg.setParseMode(parseMode);

        // –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ effectively final, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ warning –≤ –ª—è–º–±–¥–µ
        final String outboundText = text;
        final SendMessage outboundMsg = msg;

        taskExecutor.execute(() -> {
            try {
                if (log.isDebugEnabled()) {
                    log.debug("OUT ‚ñ∂ {}", outboundText.replace("\n", "\\n"));
                }
                execute(outboundMsg);
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ sendMessage", e);
            }
        });
    }

    /* –ø–æ–∫–∞–∑–∞—Ç—å 'typing', 'upload_document' –∏ —Ç. –ø. */
    private void sendChatAction(long chatId, String action) {
        taskExecutor.execute(() -> {
            try {
                execute(SendChatAction.builder()
                        .chatId(String.valueOf(chatId))
                        .action(action)
                        .build());
            } catch (TelegramApiException ignored) {}
        });
    }
}
