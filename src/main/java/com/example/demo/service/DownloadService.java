package com.example.demo.service;

import com.example.demo.queue.JobQueue;
import com.example.demo.queue.ProcessingJob;
import com.example.demo.upload.DownloadController;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class DownloadService {
    
    @Value("${download.base-url:http://localhost:8080}")
    private String downloadBaseUrl;
    
    @jakarta.annotation.PostConstruct
    void init() {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        String envDownloadUrl = System.getenv("DOWNLOAD_BASE_URL");
        if (envDownloadUrl != null && !envDownloadUrl.isEmpty()) {
            downloadBaseUrl = envDownloadUrl;
            log.info("DownloadService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å downloadBaseUrl –∏–∑ env: {}", downloadBaseUrl);
        } else {
            log.info("DownloadService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å downloadBaseUrl –∏–∑ properties: {}", downloadBaseUrl);
        }
        log.info("DOWNLOAD_BASE_URL –∏–∑ env: {}", System.getenv("DOWNLOAD_BASE_URL"));
    }
    
    private final StorageManager storageManager;
    private final JobQueue jobQueue;
    private final MessageSender messageSender;
    private final DownloadController downloadController;
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<String, DownloadInfo> downloads = new HashMap<>();
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
     */
    public void createDownloadTask(long chatId, String url, String name) {
        try {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            String downloadId = UUID.randomUUID().toString();
            
            log.info("–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏: chatId={}, url={}, name={}, downloadId={}", 
                    chatId, url, name, downloadId);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            ProcessingJob job = ProcessingJob.newDownload(chatId, url, downloadId);
            jobQueue.enqueue(job);
            
            log.info("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: jobId={}, downloadId={}", job.id(), downloadId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
            downloads.put(downloadId, new DownloadInfo(chatId, url, name, System.currentTimeMillis()));
            
            log.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: downloadId={}, downloads.size={}", 
                    downloadId, downloads.size());

            // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            messageSender.sendMessage(chatId,
                "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞!\n\n" +
                "üîó –°—Å—ã–ª–∫–∞: " + url + "\n" +
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + name + "\n\n" +
                "‚è≥ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏", e);
            messageSender.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
     */
    public void handleDownloadComplete(String downloadId, Path filePath) {
        DownloadInfo info = downloads.get(downloadId);
        if (info == null) {
            log.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {}", downloadId);
            return;
        }
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            String downloadLink = generateDownloadLink(filePath, info);
            
            log.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É: downloadId={}, fileName={}, downloadLink={}", 
                    downloadId, filePath.getFileName(), downloadLink);
            
            String message = """
                ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
                
                üìÅ –§–∞–π–ª: %s
                üìè –†–∞–∑–º–µ—Ä: %s
                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
                
                üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: %s
                
                ‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞
                """.formatted(
                    filePath.getFileName(),
                    formatFileSize(Files.size(filePath)),
                    info.userName(),
                    downloadLink
                );
            
            log.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", info.chatId(), message);
            messageSender.sendMessage(info.chatId(), message);
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
            downloads.remove(downloadId);
            
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", e);
            messageSender.sendMessage(info.chatId(), 
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
     */
    public void handleDownloadError(String downloadId, String error) {
        DownloadInfo info = downloads.get(downloadId);
        if (info == null) {
            log.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {}", downloadId);
            return;
        }
        
        messageSender.sendMessage(info.chatId(), 
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:\n\n" + error);
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        downloads.remove(downloadId);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    private String generateDownloadLink(Path filePath, DownloadInfo info) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            String shortId = generateShortId(filePath);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ DownloadController
            downloadController.registerFile(shortId, filePath);
            
            String link = downloadBaseUrl + "/download/" + shortId;
            log.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: baseUrl={}, fileName={}, shortId={}, link={}", 
                    downloadBaseUrl, filePath.getFileName(), shortId, link);
            return link;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞: {}", filePath.getFileName(), e);
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            String link = downloadBaseUrl + "/download/" + filePath.getFileName();
            return link;
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —Ñ–∞–π–ª–∞
     */
    private String generateShortId(Path filePath) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        String hash = String.valueOf(filePath.getFileName().toString().hashCode());
        return hash.replace("-", "n"); // –ó–∞–º–µ–Ω—è–µ–º –º–∏–Ω—É—Å –Ω–∞ 'n' –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å URL
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     */
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024.0 * 1024.0));
        return String.format("%.1f GB", bytes / (1024.0 * 1024.0 * 1024.0));
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<DownloadInfo> getActiveDownloads(long chatId) {
        return downloads.values().stream()
                .filter(info -> info.chatId() == chatId)
                .collect(java.util.stream.Collectors.toList());
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
     */
    public record DownloadInfo(long chatId, String url, String userName, long startTime) {}
}
